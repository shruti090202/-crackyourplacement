def merge_intervals(intervals):
    if not intervals:
        return []
    
    # Sort intervals based on their start time
    intervals.sort(key=lambda x: x[0])
    
    merged = []
    start, end = intervals[0]
    
    for current_start, current_end in intervals[1:]:
        if current_start <= end:  # Overlapping intervals, merge them
            end = max(end, current_end)
        else:  # Non-overlapping interval, add the previous one and reset bounds
            merged.append((start, end))
            start, end = current_start, current_end
            
    merged.append((start, end))  # Add the last interval
    return merged

def or_intervals(V1, V2):
    # Merge the two lists and find the union
    merged_intervals = V1 + V2
    return merge_intervals(merged_intervals)

def and_intervals(V1, V2):
    intersections = []
    for start1, end1 in V1:
        for start2, end2 in V2:
            start_overlap = max(start1, start2)
            end_overlap = min(end1, end2)
            if start_overlap <= end_overlap:
                intersections.append((start_overlap, end_overlap))
    return merge_intervals(intersections)

# Example usage:
V1 = [(2, 4), (6, 8), (1, 3)]
V2 = [(7, 9), (2, 5)]

print("OR:", or_intervals(V1, V2))  # Output: [(1, 5), (6, 9)]
print("AND:", and_intervals(V1, V2))  # Output: [(2, 3), (2, 4), (7, 8)]
