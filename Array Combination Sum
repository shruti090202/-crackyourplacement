Given a set of candidate numbers (C) (without duplicates) and a target number (T), 
find all unique combinations in C where the candidate numbers sums to T. 
The same repeated number may be chosen from C unlimited number of times.

def combination_sum(candidates, target):
    def backtrack(remaining, comb, start):
        if remaining == 0:
            # If we reach the target, add the combination to the result
            result.append(list(comb))
            return
        elif remaining < 0:
            # If the sum exceeds the target, return
            return

        for i in range(start, len(candidates)):
            # Add the number to the current combination
            comb.append(candidates[i])
            # Since the number can be used again, do not increment the start index
            backtrack(remaining - candidates[i], comb, i)
            # Backtrack, remove the number from the combination
            comb.pop()

    candidates.sort()
    result = []
    backtrack(target, [], 0)
    return result

# Example usage:
candidates = [2, 3, 6, 7]
target = 7
print(combination_sum(candidates, target))  # Output: [[2, 2, 3], [7]]
