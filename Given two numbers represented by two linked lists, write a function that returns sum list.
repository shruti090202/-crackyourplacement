class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def reverse_linked_list(head):
    prev = None
    current = head
    while current:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    return prev

def add_two_numbers(l1, l2):
    # Reverse both linked lists
    l1 = reverse_linked_list(l1)
    l2 = reverse_linked_list(l2)

    carry = 0
    dummy_head = ListNode()
    current = dummy_head

    # Traverse both linked lists
    while l1 or l2 or carry:
        val1 = l1.val if l1 else 0
        val2 = l2.val if l2 else 0
        total = val1 + val2 + carry
        
        carry = total // 10
        digit = total % 10
        
        current.next = ListNode(digit)
        current = current.next
        
        if l1:
            l1 = l1.next
        if l2:
            l2 = l2.next

    # Reverse the result linked list
    result = reverse_linked_list(dummy_head.next)
    
    return result

# Helper function to convert a linked list to a list for easy display
def linked_list_to_list(head):
    result = []
    while head:
        result.append(head.val)
        head = head.next
    return result

# Helper function to create a linked list from a list
def list_to_linked_list(lst):
    dummy_head = ListNode()
    current = dummy_head
    for value in lst:
        current.next = ListNode(value)
        current = current.next
    return dummy_head.next

# Example usage:
l1 = list_to_linked_list([7, 1, 6])  # Represents 617
l2 = list_to_linked_list([5, 9, 2])  # Represents 295

sum_list = add_two_numbers(l1, l2)
print(linked_list_to_list(sum_list))  # Output will be [2, 1, 9] which represents 912
