C PROGRAM
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2) {
    if(list1 == NULL && list2 == NULL) return NULL;
    if(list1 == NULL) return list2;
    if(list2 == NULL) return list1;
    struct ListNode new;
    struct ListNode* final = &new;
    new.next = NULL;
    while(list1!=NULL && list2!=NULL){
        if(list2->val < list1->val){
            final->next = list2;
            list2 = list2->next;
        }
        else{
            final->next = list1;
            list1 = list1->next;
        }
        final =final->next;
    }
    if(list1!=NULL){
        final->next = list1;
    }
    else{
        final->next = list2;
    }
    return new.next;
}


PYTHON PROGRAM
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if list1 == None and list2 == None:
            return None
        if list1 == None:
            return list2
        if list2 == None:
            return list1
        new = ListNode()
        final = new
        new.next = None
        while(list1!=None and list2!=None):
            if list2.val<list1.val:
                final.next = list2
                list2 = list2.next
            else:
                final.next = list1
                list1 = list1.next
            final = final.next
        
        if list1!=None:
            final.next = list1
        elif list2!=None:
            final.next = list2
        return new.next
