def letter_combinations(digits):
    if not digits:
        return []

    # Mapping of digits to letters
    phone_map = {
        '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',
        '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'
    }
    
    def backtrack(index, path):
        # If the current combination is the same length as digits, add to results
        if index == len(digits):
            combinations.append(''.join(path))
            return
        
        # Get the letters that the current digit maps to, and loop through them
        current_digit = digits[index]
        for letter in phone_map[current_digit]:
            path.append(letter)  # Add the letter to the current path
            backtrack(index + 1, path)  # Move on to the next digit
            path.pop()  # Remove the letter before backtracking

    combinations = []
    backtrack(0, [])
    return combinations

# Example usage:
digits = "23"
print(letter_combinations(digits))  # Output: ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
